<div class="container py-5">
    <h1 class="text-primary mt-5 mb-4">Tus Transacciones</h1>
    <p class="text-muted mb-4">Consulta tus transacciones y realiza nuevas.</p>
    <div class="mb-4">
        <a href="/transactions/create" class="btn btn-outline-primary">Crear transacción</a>
    </div>

    <!-- Mostrar saldo del usuario -->
    <div class="mb-4 p-3 bg-light rounded">
        <span class="fw-bold">Saldo Actual:</span>
        <span id="user-balance" class="fw-bold">$ 0.00</span>
    </div>

    <!-- Mostrar número de cuenta -->
    <div class="mb-4 p-3 bg-light rounded">
        <span class="fw-bold">Número de Cuenta:</span>
        <span id="user-account-number" class="fw-bold">123456789</span> <!-- Número de cuenta -->
    </div>

    <!-- Tabla de Transacciones -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="table-light">
                <tr>
                    <th class="py-3 px-6">Monto</th>
                    <th class="py-3 px-6">Tipo</th>
                    <th class="py-3 px-6">Descripción</th>
                    <th class="py-3 px-6">Emisor</th>
                    <th class="py-3 px-6">Receptor</th>
                    <th class="py-3 px-6">Fecha</th>
                </tr>
            </thead>
            <tbody id="transaction-list" class="text-sm">
                <!-- Aquí se mostrarán las transacciones -->
            </tbody>
        </table>
    </div>
</div>

<script>
    // Función para formatear la fecha en formato dd-mm-aaaa hh:mm:ss con zona horaria América Central (El Salvador)
    function formatDate(dateString) {
        const date = new Date(dateString);
        const formatter = new Intl.DateTimeFormat('es-SV', {
            timeZone: 'America/El_Salvador',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        });
        return formatter.format(date);
    }

    // Función para obtener las transacciones, saldo y número de cuenta del usuario desde el servidor
    async function obtenerTransacciones() {
        try {
            const response = await fetch('/transactions/api/transactions', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + localStorage.getItem('token') // token almacenado en localStorage
                }
            });

            if (!response.ok) {
                throw new Error('Error al obtener las transacciones');
            }

            const data = await response.json();
            actualizarTabla(data.transactions);
            document.getElementById('user-balance').textContent = `$ ${data.balance.toLocaleString('es-SV')}`;
            document.getElementById('user-account-number').textContent = data.account_number; // Mostrar el número de cuenta
        } catch (error) {
            console.error('Error al obtener transacciones:', error);
        }
    }

    // Función para actualizar la tabla con las transacciones
    function actualizarTabla(transacciones) {
        const lista = document.getElementById('transaction-list');
        lista.innerHTML = '';  // Limpiar la tabla antes de actualizar

        transacciones.forEach(transaccion => {
            const fila = document.createElement('tr');
            const monto = parseFloat(transaccion.amount) || 0;

            fila.innerHTML = `
                <td class="py-3 px-6 text-gray-800">$ ${monto.toLocaleString('es-SV')}</td>
                <td class="py-3 px-6">${transaccion.type}</td>
                <td class="py-3 px-6 text-muted">${transaccion.description || 'Sin descripción'}</td>
                <td class="py-3 px-6 text-muted">${transaccion.user.username}</td>
                <td class="py-3 px-6 text-muted">${transaccion.destination ? transaccion.destination.username : 'N/A'}</td>
                <td class="py-3 px-6">${formatDate(transaccion.createdAt)}</td>
            `;
            lista.appendChild(fila);
        });
    }

    // Hacer la petición cada 10 segundos (10000ms = 10 segundos)
    setInterval(obtenerTransacciones, 10000);

    // Cargar las transacciones al cargar la página
    document.addEventListener('DOMContentLoaded', obtenerTransacciones);
</script>
